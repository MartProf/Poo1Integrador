package com.example.controlador;

import com.example.modelo.EstadoEvento;
import com.example.modelo.Evento;
import com.example.modelo.Persona;
import com.example.servicio.EventoService;
import com.example.servicio.ParticipanteService;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.ColumnConstraints;
import javafx.geometry.Pos;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Callback;
import java.time.LocalDate;
import java.io.IOException;
import java.util.List;

/**
 * Controlador para la vista de eventos disponibles con calendario interactivo.
 * 
 * Este controlador implementa una interfaz ciudadana completa que permite:
 * 1. Visualizar eventos en un calendario mensual interactivo
 * 2. Explorar eventos por fechas espec√≠ficas con indicadores visuales
 * 3. Gestionar inscripciones ciudadanas con validaciones exhaustivas
 * 4. Ver detalles completos de eventos disponibles
 * 5. Filtrar autom√°ticamente eventos seg√∫n disponibilidad y fechas
 * 
 * Caracter√≠sticas del calendario:
 * - Navegaci√≥n mensual con botones anterior/siguiente
 * - Indicadores visuales por estado: hoy, seleccionado, con eventos, normales
 * - C√≥digos de color diferenciados para eventos activos vs. terminados
 * - Informaci√≥n de cupo en tiempo real para eventos con l√≠mite
 * 
 * Sistema de inscripciones:
 * - Validaci√≥n de estado de evento (solo CONFIRMADO/EN_EJECUCION)
 * - Verificaci√≥n de fechas (no eventos terminados)
 * - Control de cupo para eventos TieneCupo
 * - Prevenci√≥n de duplicados e inscripci√≥n de responsables
 * - Integraci√≥n con modal de b√∫squeda de personas
 * 
 * Filtrado inteligente:
 * - Solo muestra eventos disponibles para inscripci√≥n
 * - Excluye eventos PLANIFICADO y FINALIZADO
 * - Excluye eventos que ya terminaron por fechas
 * - Informaci√≥n contextual de disponibilidad en tiempo real
 * 
 * El controlador est√° optimizado para la experiencia ciudadana, 
 * proporcionando informaci√≥n clara y acciones directas para participaci√≥n
 * en la programaci√≥n cultural municipal.
 * 
 * @author Sistema Municipal de Eventos
 * @version 1.0
 * @since 2025-07-30
 * 
 * @see Evento
 * @see EventoService
 * @see ParticipanteService
 * @see BuscarPersonaController
 * @see DetallesEventoController
 */
public class EventosDisponiblesController {

    // =============== COMPONENTES DEL CALENDARIO INTERACTIVO ===============
    
    /**
     * Panel principal del calendario organizado como grilla.
     * 
     * Implementa un calendario mensual donde cada celda representa un d√≠a
     * con indicadores visuales de eventos. La grilla se reconstruye
     * din√°micamente al cambiar de mes y responde a clics para selecci√≥n.
     */
    @FXML
    private GridPane calendarioGrid;
    
    /**
     * Etiqueta que muestra el mes y a√±o actual del calendario.
     * 
     * Se actualiza autom√°ticamente al navegar entre meses,
     * proporcionando contexto temporal al usuario.
     */
    @FXML
    private Label lblMesAno;
    
    /**
     * Bot√≥n para navegar al mes anterior.
     * 
     * Retrocede un mes en el calendario y actualiza toda la vista
     * incluyendo eventos y indicadores visuales.
     */
    @FXML
    private Button btnMesAnterior;
    
    /**
     * Bot√≥n para navegar al mes siguiente.
     * 
     * Avanza un mes en el calendario y actualiza toda la vista
     * incluyendo eventos y indicadores visuales.
     */
    @FXML
    private Button btnMesSiguiente;

    // =============== TABLA DE EVENTOS DEL D√çA SELECCIONADO ===============
    
    /**
     * Tabla principal que muestra eventos del d√≠a seleccionado.
     * 
     * Se actualiza autom√°ticamente al hacer clic en d√≠as del calendario,
     * mostrando solo eventos disponibles para inscripci√≥n con informaci√≥n
     * detallada y acciones directas.
     */
    @FXML
    private TableView<Evento> tablaEventosDelDia;
    
    /**
     * Columna que muestra el nombre del evento.
     * 
     * Campo principal de identificaci√≥n para el ciudadano,
     * utiliza el nombre completo configurado en el evento.
     */
    @FXML
    private TableColumn<Evento, String> colNombre;
    
    /**
     * Columna que muestra el tipo de evento con iconos.
     * 
     * Utiliza iconos emoji para diferenciaci√≥n visual r√°pida:
     * üè™ Feria, üéµ Concierto, üé® Exposici√≥n, üîß Taller, üé¨ Ciclo de Cine
     */
    @FXML
    private TableColumn<Evento, String> colTipo;
    
    /**
     * Columna que muestra informaci√≥n de fechas del evento.
     * 
     * Para eventos de un d√≠a: fecha √∫nica
     * Para eventos multi-d√≠a: rango de fechas (inicio a fin)
     */
    @FXML
    private TableColumn<Evento, String> colHorario;
    
    /**
     * Columna que muestra la duraci√≥n del evento.
     * 
     * Indica cu√°ntos d√≠as consecutivos durar√° el evento,
     * informaci√≥n √∫til para planificaci√≥n de participaci√≥n.
     */
    @FXML
    private TableColumn<Evento, String> colDuracion;
    
    /**
     * Columna que muestra el estado del evento con iconos.
     * 
     * Estados con iconos: üìã Planificado, ‚úÖ Confirmado, 
     * ‚ö° En Ejecuci√≥n, üèÅ Finalizado.
     * Incluye l√≥gica autom√°tica para eventos terminados por fechas.
     */
    @FXML
    private TableColumn<Evento, String> colEstado;
    
    /**
     * Columna que muestra informaci√≥n de cupo disponible.
     * 
     * Para eventos TieneCupo: "X/Y disponibles" (disponibles/total)
     * Para eventos sin l√≠mite: "Sin l√≠mite"
     * Se actualiza en tiempo real con inscripciones.
     */
    @FXML
    private TableColumn<Evento, String> colCupo;
    
    /**
     * Columna que muestra responsables del evento.
     * 
     * Un responsable: Nombre completo
     * M√∫ltiples: "X responsables"
     * Sin responsables: "Sin asignar"
     */
    @FXML
    private TableColumn<Evento, String> colResponsables;
    
    /**
     * Columna con botones de acci√≥n din√°micos.
     * 
     * Incluye botones "‚úì Inscribir" y "üìã Detalles" con
     * habilitaci√≥n/deshabilitaci√≥n inteligente seg√∫n disponibilidad.
     */
    @FXML
    private TableColumn<Evento, Void> colAcciones;

    // =============== ETIQUETAS INFORMATIVAS ===============
    
    /**
     * Etiqueta que muestra la fecha del d√≠a seleccionado.
     * 
     * Formato: "üìã Eventos del YYYY-MM-DD"
     * Proporciona contexto sobre qu√© d√≠a se est√° visualizando.
     */
    @FXML
    private Label lblEventosDelDia;
    
    /**
     * Etiqueta que muestra la cantidad de eventos del d√≠a.
     * 
     * Formato: "X evento(s)"
     * Proporciona conteo r√°pido de eventos disponibles.
     */
    @FXML
    private Label lblCantidadEventos;

    // =============== BOTONES DE FILTROS R√ÅPIDOS ===============
    
    /**
     * Bot√≥n para navegar r√°pidamente al d√≠a actual.
     * 
     * Resetea el calendario a la fecha de hoy y selecciona
     * autom√°ticamente el d√≠a actual mostrando sus eventos.
     */
    @FXML
    private Button btnHoy;
    
    /**
     * Bot√≥n para mostrar eventos de la semana actual.
     * 
     * Actualmente implementado como navegaci√≥n a hoy,
     * preparado para expansi√≥n a vista semanal.
     */
    @FXML
    private Button btnEstaSemana;
    
    /**
     * Bot√≥n para navegar al pr√≥ximo mes.
     * 
     * Avanza un mes en el calendario para exploraci√≥n
     * de eventos futuros en el sistema.
     */
    @FXML
    private Button btnProximoMes;
    
    /**
     * Bot√≥n para actualizar manualmente la vista.
     * 
     * Recarga todos los eventos desde la base de datos
     * y actualiza calendario y tabla completamente.
     */
    @FXML
    private Button btnActualizar;

    // =============== SERVICIOS Y ESTADO INTERNO ===============
    
    /**
     * Persona autenticada en el sistema.
     * 
     * Aunque no se usa actualmente para filtrado (vista ciudadana
     * muestra todos los eventos disponibles), se mantiene para
     * futuras funcionalidades como preferencias personalizadas.
     */
    private Persona personaLogueada;
    
    /**
     * Servicio para operaciones de eventos.
     * 
     * Utilizado para cargar eventos disponibles y validaciones
     * relacionadas con responsabilidad de eventos.
     */
    private EventoService eventoService;
    
    /**
     * Servicio para gesti√≥n de participantes.
     * 
     * Maneja todas las operaciones de inscripci√≥n, verificaci√≥n
     * de duplicados y validaciones de cupo.
     */
    private ParticipanteService participanteService;
    
    // =============== VARIABLES DE CONTROL DEL CALENDARIO ===============
    
    /**
     * Fecha del mes actualmente mostrado en el calendario.
     * 
     * Controla qu√© mes se visualiza, independiente del d√≠a
     * seleccionado para ver eventos.
     */
    private java.time.LocalDate fechaActual;
    
    /**
     * D√≠a espec√≠fico seleccionado por el usuario.
     * 
     * Determina qu√© eventos se muestran en la tabla inferior,
     * puede ser diferente al mes visualizado.
     */
    private java.time.LocalDate diaSeleccionado;
    
    /**
     * Lista de todos los eventos disponibles para inscripci√≥n.
     * 
     * Contiene solo eventos en estado CONFIRMADO o EN_EJECUCION
     * que no hayan terminado por fechas. Se filtra autom√°ticamente
     * al cargar desde la base de datos.
     */
    private List<Evento> todosLosEventos;

    /**
     * Constructor del controlador de eventos disponibles.
     * 
     * Inicializa los servicios necesarios y establece fechas por defecto:
     * - EventoService para operaciones de eventos
     * - ParticipanteService para gesti√≥n de inscripciones
     * - Fecha actual como fecha inicial del calendario
     * - D√≠a actual como d√≠a seleccionado inicial
     * 
     * La configuraci√≥n espec√≠fica de la interfaz se realiza en initialize().
     */
    public EventosDisponiblesController() {
        this.eventoService = new EventoService();
        this.participanteService = new ParticipanteService();
        this.fechaActual = java.time.LocalDate.now();
        this.diaSeleccionado = java.time.LocalDate.now();
    }

    /**
     * Inicializa todos los componentes de la interfaz despu√©s de cargar el FXML.
     * 
     * Secuencia de inicializaci√≥n:
     * 1. Configuraci√≥n de columnas de tabla con factories espec√≠ficas
     * 2. Configuraci√≥n de manejadores de eventos para botones
     * 3. Carga inicial de eventos disponibles desde la base de datos
     * 4. Generaci√≥n del calendario con indicadores visuales
     * 5. Mostrar eventos del d√≠a actual por defecto
     * 
     * Se ejecuta autom√°ticamente por JavaFX antes de mostrar la ventana.
     * 
     * @see #initColumns()
     * @see #initEventHandlers()
     * @see #cargarTodosLosEventos()
     * @see #generarCalendario()
     * @see #mostrarEventosDelDia(LocalDate)
     */
    @FXML
    public void initialize() {
        initColumns();
        initEventHandlers();
        cargarTodosLosEventos();
        generarCalendario();
        mostrarEventosDelDia(diaSeleccionado);
    }

    /**
     * Configura todas las columnas de la tabla de eventos del d√≠a.
     * 
     * Configuraci√≥n espec√≠fica por columna:
     * - Nombre: Texto directo del evento
     * - Tipo: Iconos emoji espec√≠ficos por tipo
     * - Horario: Fecha √∫nica o rango seg√∫n duraci√≥n
     * - Duraci√≥n: Formato "X d√≠a(s)"
     * - Estado: Iconos con l√≥gica de finalizaci√≥n autom√°tica
     * - Cupo: Informaci√≥n din√°mica de disponibilidad
     * - Responsables: Formato inteligente seg√∫n cantidad
     * - Acciones: CellFactory complejo con botones condicionales
     * 
     * Todas las columnas utilizan SimpleStringProperty excepto
     * Acciones que implementa CellFactory personalizado.
     * 
     * @see #obtenerTipoEvento(Evento)
     * @see #obtenerInfoFechas(Evento)
     * @see #formatearEstadoConFecha(Evento)
     * @see #obtenerInfoCupo(Evento)
     * @see #getBotonAccionesCellFactory()
     */
    private void initColumns() {
        // Configurar columnas de la tabla de eventos del d√≠a
        colNombre.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(data.getValue().getNombre()));

        colTipo.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(obtenerTipoEvento(data.getValue())));

        colHorario.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(obtenerInfoFechas(data.getValue())));

        colDuracion.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(data.getValue().getDuraci√≥nDias() + " d√≠a(s)"));

        colEstado.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(formatearEstadoConFecha(data.getValue())));

        colCupo.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(obtenerInfoCupo(data.getValue())));

        colResponsables.setCellValueFactory(data -> 
            new javafx.beans.property.SimpleStringProperty(obtenerResponsables(data.getValue())));

        // Configurar columna de acciones
        colAcciones.setCellFactory(getBotonAccionesCellFactory());
    }

    /**
     * Genera CellFactory para la columna de acciones con l√≥gica inteligente.
     * 
     * Implementa TableCell personalizado que:
     * 
     * COMPONENTES:
     * - Bot√≥n "‚úì Inscribir": Para inscribir personas al evento
     * - Bot√≥n "üìã Detalles": Para ver informaci√≥n completa del evento
     * - Layout horizontal con espaciado m√≠nimo
     * 
     * L√ìGICA DE HABILITACI√ìN INTELIGENTE:
     * - Eval√∫a si el evento es inscribible (estado + fechas)
     * - Verifica cupo disponible para eventos TieneCupo
     * - Cambia colores seg√∫n disponibilidad:
     *   * Verde: Inscribible con cupo
     *   * Naranja: Sin cupo disponible
     *   * Gris: No inscribible (estado/fechas)
     * 
     * ESTILOS COMPACTOS:
     * - Botones peque√±os optimizados para tabla
     * - Colores diferenciados para feedback visual inmediato
     * - Padding y fuentes reducidas para mejor aprovechamiento
     * 
     * MANEJO DE FILAS VAC√çAS:
     * - Detecta filas vac√≠as y oculta botones apropiadamente
     * - Previene errores de √≠ndice en filas sin datos
     * 
     * @return CellFactory configurado para generar botones din√°micos
     * @see #inscribirPersonaEnEvento(Evento)
     * @see #verDetallesEvento(Evento)
     * @see #esEventoInscribible(Evento)
     */
    private Callback<TableColumn<Evento, Void>, TableCell<Evento, Void>> getBotonAccionesCellFactory() {
        return param -> new TableCell<>() {
            private final Button btnInscribir = new Button("‚úì Inscribir");
            private final Button btnVerDetalle = new Button("üìã Detalles");
            private final HBox pane = new HBox(3, btnInscribir, btnVerDetalle);

            {
                // Estilos m√°s compactos para los botones
                btnInscribir.setStyle("-fx-background-color: #27ae60; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 4 8; -fx-background-radius: 3; -fx-font-size: 10px;");
                btnVerDetalle.setStyle("-fx-background-color: #3498db; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 4 8; -fx-background-radius: 3; -fx-font-size: 10px;");

                btnInscribir.setOnAction(event -> {
                    Evento evento = getTableView().getItems().get(getIndex());
                    inscribirPersonaEnEvento(evento);
                });

                btnVerDetalle.setOnAction(event -> {
                    Evento evento = getTableView().getItems().get(getIndex());
                    verDetallesEvento(evento);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    Evento evento = getTableView().getItems().get(getIndex());

                    // Usar la nueva l√≥gica de validaci√≥n
                    boolean eventoInscribible = esEventoInscribible(evento);

                    // Si tiene cupo (es instancia de TieneCupo), verificar cupo disponible
                    boolean hayCupo = true;
                    if (evento instanceof com.example.modelo.TieneCupo) {
                        com.example.modelo.TieneCupo cupoEvento = (com.example.modelo.TieneCupo) evento;
                        int inscriptos = evento.getParticipantes() != null ? evento.getParticipantes().size() : 0;
                        int cupoDisponible = cupoEvento.getCupoMaximo() - inscriptos;
                        hayCupo = cupoDisponible > 0;
                    }

                    // Habilitar bot√≥n solo si el evento es inscribible y hay cupo
                    btnInscribir.setDisable(!(eventoInscribible && hayCupo));
                    
                    // Cambiar estilo del bot√≥n seg√∫n disponibilidad
                    if (!eventoInscribible) {
                        btnInscribir.setStyle("-fx-background-color: #95a5a6; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 4 8; -fx-background-radius: 3; -fx-font-size: 10px;");
                    } else if (!hayCupo) {
                        btnInscribir.setStyle("-fx-background-color: #f39c12; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 4 8; -fx-background-radius: 3; -fx-font-size: 10px;");
                    } else {
                        btnInscribir.setStyle("-fx-background-color: #27ae60; -fx-text-fill: white; -fx-font-weight: bold; -fx-padding: 4 8; -fx-background-radius: 3; -fx-font-size: 10px;");
                    }

                    setGraphic(pane);
                }
            }
        };
    }

    /**
     * Configura manejadores de eventos para todos los botones de control.
     * 
     * Configuraci√≥n de navegaci√≥n:
     * - btnMesAnterior/btnMesSiguiente: Navegaci√≥n mensual del calendario
     * - btnHoy: Navegaci√≥n r√°pida al d√≠a actual
     * - btnEstaSemana: Vista de eventos semanales (actualmente redirige a hoy)
     * - btnProximoMes: Navegaci√≥n r√°pida al pr√≥ximo mes
     * - btnActualizar: Recarga completa de datos y vista
     * 
     * Todos los manejadores est√°n protegidos contra referencias null
     * y ejecutan actualizaciones completas de la vista seg√∫n corresponda.
     */
    private void initEventHandlers() {
        // Navegaci√≥n del calendario
        btnMesAnterior.setOnAction(e -> cambiarMes(-1));
        btnMesSiguiente.setOnAction(e -> cambiarMes(1));
        
        // Filtros r√°pidos
        btnHoy.setOnAction(e -> irAHoy());
        btnEstaSemana.setOnAction(e -> mostrarEventosEstaSemana());
        btnProximoMes.setOnAction(e -> mostrarEventosProximoMes());
        btnActualizar.setOnAction(e -> actualizarVista());
    }

    // =============== M√âTODOS AUXILIARES PARA FORMATEO DE COLUMNAS ===============
    
    /**
     * Obtiene representaci√≥n visual del tipo de evento con iconos emoji.
     * 
     * Mapeo de tipos a iconos:
     * - Feria: üè™ Feria
     * - Concierto: üéµ Concierto  
     * - Exposici√≥n: üé® Exposici√≥n
     * - Taller: üîß Taller
     * - Ciclo de Cine: üé¨ Ciclo de Cine
     * - Otros: üìÖ Evento
     * 
     * Los iconos proporcionan identificaci√≥n visual r√°pida en la tabla,
     * mejorando la experiencia del usuario ciudadano.
     * 
     * @param evento El evento cuyo tipo se desea obtener
     * @return Cadena con icono y nombre del tipo
     */
    private String obtenerTipoEvento(Evento evento) {
        if (evento instanceof com.example.modelo.Feria) return "üè™ Feria";
        if (evento instanceof com.example.modelo.Concierto) return "üéµ Concierto";
        if (evento instanceof com.example.modelo.Exposicion) return "üé® Exposici√≥n";
        if (evento instanceof com.example.modelo.Taller) return "üîß Taller";
        if (evento instanceof com.example.modelo.CicloDeCine) return "üé¨ Ciclo de Cine";
        return "üìÖ Evento";
    }

    /**
     * Formatea estados de evento con iconos emoji.
     * 
     * Mapeo de estados a iconos:
     * - PLANIFICADO: üìã Planificado
     * - CONFIRMADO: ‚úÖ Confirmado
     * - EN_EJECUCION: ‚ö° En Ejecuci√≥n  
     * - FINALIZADO: üèÅ Finalizado
     * 
     * Utilizado internamente por formatearEstadoConFecha() que
     * agrega l√≥gica adicional de finalizaci√≥n autom√°tica.
     * 
     * @param estado El estado del evento a formatear
     * @return Cadena con icono y nombre del estado
     */
    private String formatearEstado(EstadoEvento estado) {
        switch (estado) {
            case PLANIFICADO: return "üìã Planificado";
            case CONFIRMADO: return "‚úÖ Confirmado";
            case EN_EJECUCION: return "‚ö° En Ejecuci√≥n";
            case FINALIZADO: return "üèÅ Finalizado";
            default: return estado.toString();
        }
    }
    
    /**
     * Formatea estado considerando fechas autom√°ticas de finalizaci√≥n.
     * 
     * L√≥gica inteligente que:
     * 1. Obtiene el estado formal del evento
     * 2. Verifica si el evento ya termin√≥ por fechas
     * 3. Sobrescribe con "üèÅ Finalizado" si corresponde
     * 
     * Esta l√≥gica es fundamental para la vista ciudadana ya que
     * eventos pueden estar marcados como "Confirmado" pero haber
     * terminado seg√∫n su fecha de finalizaci√≥n calculada.
     * 
     * @param evento El evento cuyo estado se desea formatear
     * @return Estado formateado considerando fechas
     * @see #eventoYaTermino(Evento)
     * @see #formatearEstado(EstadoEvento)
     */
    private String formatearEstadoConFecha(Evento evento) {
        EstadoEvento estado = evento.getEstado();
        String estadoTexto = formatearEstado(estado);
        
        // Si el evento ya termin√≥ por fechas, sobrescribir el estado
        if (eventoYaTermino(evento)) {
            return "üèÅ Finalizado";
        }
        
        return estadoTexto;
    }
    
    /**
     * Genera informaci√≥n de fechas del evento.
     * 
     * Formato inteligente seg√∫n duraci√≥n:
     * - Eventos de 1 d√≠a: Fecha √∫nica (YYYY-MM-DD)
     * - Eventos multi-d√≠a: Rango (YYYY-MM-DD a YYYY-MM-DD)
     * 
     * Utiliza calcularFechaFinalizacion() para determinar
     * la fecha de t√©rmino basada en duraci√≥n del evento.
     * 
     * @param evento El evento cuyas fechas se desean obtener
     * @return Cadena formateada con informaci√≥n de fechas
     * @see #calcularFechaFinalizacion(Evento)
     */
    private String obtenerInfoFechas(Evento evento) {
        LocalDate inicio = evento.getFechaInicio();
        LocalDate fin = calcularFechaFinalizacion(evento);
        
        if (evento.getDuraci√≥nDias() == 1) {
            return inicio.toString();
        } else {
            return inicio + " a " + fin;
        }
    }

    /**
     * Genera informaci√≥n de cupo disponible para eventos con l√≠mite.
     * 
     * L√≥gica diferenciada por tipo:
     * - Eventos TieneCupo: "X/Y disponibles" (disponibles de total)
     * - Otros eventos: "Sin l√≠mite"
     * 
     * La informaci√≥n se calcula en tiempo real considerando
     * participantes ya inscriptos, fundamental para la toma
     * de decisiones de inscripci√≥n ciudadana.
     * 
     * @param evento El evento cuyo cupo se desea obtener
     * @return Cadena formateada con informaci√≥n de cupo
     */
    private String obtenerInfoCupo(Evento evento) {
        if (evento instanceof com.example.modelo.TieneCupo) {
            com.example.modelo.TieneCupo cupoEvento = (com.example.modelo.TieneCupo) evento;
            int inscriptos = evento.getParticipantes() != null ? evento.getParticipantes().size() : 0;
            int total = cupoEvento.getCupoMaximo();
            int disponible = total - inscriptos;
            return String.format("%d/%d disponibles", disponible, total);
        }
        return "Sin l√≠mite";
    }

    /**
     * Genera informaci√≥n de responsables del evento.
     * 
     * Formato inteligente seg√∫n cantidad:
     * - Un responsable: Nombre completo (nombre + apellido)
     * - M√∫ltiples responsables: "X responsables"
     * - Sin responsables: "Sin asignar"
     * 
     * Proporciona informaci√≥n de contacto/responsabilidad
     * √∫til para consultas ciudadanas sobre eventos.
     * 
     * @param evento El evento cuyos responsables se desean obtener
     * @return Cadena formateada con informaci√≥n de responsables
     */
    private String obtenerResponsables(Evento evento) {
        if (evento.getResponsables() != null && !evento.getResponsables().isEmpty()) {
            if (evento.getResponsables().size() == 1) {
                Persona responsable = evento.getResponsables().get(0);
                return responsable.getNombre() + " " + responsable.getApellido();
            } else {
                return evento.getResponsables().size() + " responsables";
            }
        }
        return "Sin asignar";
    }

    // =============== M√âTODOS DE NAVEGACI√ìN DEL CALENDARIO ===============
    
    /**
     * Cambia el mes actual del calendario.
     * 
     * Navegaci√≥n incremental que:
     * 1. Modifica fechaActual sumando/restando meses
     * 2. Regenera completamente el calendario visual
     * 3. Actualiza la tabla de eventos filtrados
     * 4. Mantiene sincronizaci√≥n entre calendario y tabla
     * 
     * M√©todo core para la navegaci√≥n temporal del calendario,
     * usado por todos los botones de navegaci√≥n mensual.
     * 
     * @param incremento N√∫mero de meses a sumar (positivo) o restar (negativo)
     */
    private void cambiarMes(int incremento) {
        fechaActual = fechaActual.plusMonths(incremento);
        actualizarLabelMes();
        generarCalendario();
    }

    /**
     * Navega directamente al d√≠a actual.
     * 
     * Navegaci√≥n absoluta que:
     * 1. Establece fechaActual en LocalDate.now()
     * 2. Selecciona autom√°ticamente el d√≠a actual
     * 3. Regenera calendario y tabla
     * 
     * Funcionalidad de "regreso a hoy" fundamental para
     * usuarios que navegan extensamente en el calendario.
     */
    private void irAHoy() {
        diaSeleccionado = LocalDate.now();
        fechaActual = diaSeleccionado;
        mostrarEventosDelDia(diaSeleccionado);
        actualizarLabelMes();
        generarCalendario();
    }

    /**
     * Muestra eventos de la semana actual.
     * 
     * Implementaci√≥n actual redirige a irAHoy() pero est√°
     * preparada para extensi√≥n futura con filtrado semanal.
     * 
     * Funcionalidad dise√±ada para vista semanal de eventos
     * que podr√≠a incluir rango de 7 d√≠as desde hoy.
     */
    private void mostrarEventosEstaSemana() {
        // Por ahora, simplemente vamos a hoy
        irAHoy();
    }

    /**
     * Navega al pr√≥ximo mes desde la fecha actual.
     * 
     * Navegaci√≥n que siempre parte del mes actual real
     * (LocalDate.now()) y avanza un mes, independientemente
     * de d√≥nde est√© navegando el usuario.
     * 
     * √ötil para "salto r√°pido" al pr√≥ximo mes sin perder
     * referencia temporal actual.
     */
    private void mostrarEventosProximoMes() {
        fechaActual = LocalDate.now().plusMonths(1);
        actualizarLabelMes();
        generarCalendario();
    }

    /**
     * Actualiza toda la vista recargando datos.
     * 
     * Proceso completo de actualizaci√≥n:
     * 1. Recarga todosLosEventos desde EventoService
     * 2. Regenera calendario con nuevos datos
     * 3. Actualiza tabla con eventos filtrados
     * 
     * Fundamental para refrescar datos tras cambios
     * externos (inscripciones, nuevos eventos, etc.)
     */
    private void actualizarVista() {
        cargarTodosLosEventos();
        generarCalendario();
        mostrarEventosDelDia(diaSeleccionado);
    }

    // =============== M√âTODOS DE CARGA Y GESTI√ìN DE DATOS ===============
    
    /**
     * Carga todos los eventos desde el servicio aplicando filtros.
     * 
     * Proceso de filtrado multicapa:
     * 1. Obtiene todos los eventos desde EventoService
     * 2. Filtra por estados disponibles (CONFIRMADO, EN_EJECUCION)
     * 3. Excluye eventos que ya terminaron por fechas
     * 4. Actualiza contadores y etiquetas informativas
     * 
     * Este filtrado es crucial para la vista ciudadana ya que
     * solo muestra eventos realmente disponibles para inscripci√≥n
     * o visualizaci√≥n, ocultando borradores y eventos finalizados.
     * 
     * @see #esEventoDisponibleParaMostrar(Evento)
     * @see #actualizarLabels()
     */
    private void cargarTodosLosEventos() {
        List<Evento> todosEventos = eventoService.getTodosLosEventos();
        
        // Filtrar solo eventos disponibles (CONFIRMADO o EN_EJECUCION) y que no hayan terminado
        this.todosLosEventos = todosEventos.stream()
                .filter(evento -> esEventoDisponibleParaMostrar(evento))
                .collect(java.util.stream.Collectors.toList());
        
        actualizarLabels();
    }
    
    /**
     * Verifica si un evento debe mostrarse en la vista de eventos disponibles.
     * 
     * Criterios de filtrado para vista ciudadana:
     * 1. Estado debe ser CONFIRMADO o EN_EJECUCION
     * 2. El evento no debe haber terminado por fechas
     * 
     * ESTADOS EXCLUIDOS:
     * - PLANIFICADO: Eventos en borrador, no listos para ciudadanos
     * - FINALIZADO: Eventos formalmente cerrados
     * 
     * FILTRO POR FECHAS:
     * - Eventos que ya terminaron seg√∫n su duraci√≥n son excluidos
     * - Permite mostrar eventos "EN_EJECUCION" que a√∫n no terminan
     * 
     * Este filtro es fundamental para la experiencia ciudadana,
     * asegurando que solo vean eventos realmente disponibles.
     * 
     * @param evento El evento a evaluar
     * @return true si el evento debe mostrarse, false en caso contrario
     * @see #eventoYaTermino(Evento)
     */
    private boolean esEventoDisponibleParaMostrar(Evento evento) {
        EstadoEvento estado = evento.getEstado();
        
        // Solo mostrar eventos CONFIRMADO o EN_EJECUCION
        if (estado != EstadoEvento.CONFIRMADO && estado != EstadoEvento.EN_EJECUCION) {
            return false;
        }
        
        // No mostrar eventos que ya terminaron por fechas
        return !eventoYaTermino(evento);
    }

    // =============== M√âTODOS DE GENERACI√ìN DEL CALENDARIO ===============
    
    /**
     * M√©todo de coordinaci√≥n para regenerar el calendario completo.
     * 
     * Proceso en dos fases:
     * 1. Poblar el calendario mensual con d√≠as y eventos
     * 2. Mostrar eventos espec√≠ficos del d√≠a seleccionado
     * 
     * Act√∫a como punto de entrada √∫nico para actualizaciones
     * completas de la vista calendario.
     */
    private void generarCalendario() {
        poblarCalendario();
        mostrarEventosDelDia(diaSeleccionado);
    }
    
    /**
     * Genera la estructura visual del calendario mensual.
     * 
     * ALGORITMO DE CONSTRUCCI√ìN:
     * 1. Limpia completamente el GridPane calendario
     * 2. Configura layout responsive con 7 columnas uniformes
     * 3. A√±ade encabezados de d√≠as de la semana
     * 4. Calcula posicionamiento del primer d√≠a del mes
     * 5. Genera botones para todos los d√≠as del mes
     * 6. Aplica estilos diferenciados por estado
     * 
     * DISE√ëO VISUAL:
     * - Calendario tipo grilla 7x6 (max 6 semanas)
     * - Colores diferenciados: d√≠a actual, d√≠a seleccionado, d√≠as con eventos
     * - Espaciado y bordes redondeados para mejor usabilidad
     * - Indicadores visuales de eventos por d√≠a
     * 
     * INTERACTIVIDAD:
     * - Cada d√≠a es un bot√≥n clickeable
     * - Click actualiza diaSeleccionado y tabla de eventos
     * - Feedback visual inmediato de selecci√≥n
     * 
     * Este m√©todo es el coraz√≥n visual del calendario, generando
     * la interfaz principal de navegaci√≥n temporal para ciudadanos.
     * 
     * @see #crearBotonDia(LocalDate)
     * @see #mostrarEventosDelDia(LocalDate)
     */
    private void poblarCalendario() {
        // Limpiar el calendario
        calendarioGrid.getChildren().clear();
        calendarioGrid.getColumnConstraints().clear();
        calendarioGrid.getRowConstraints().clear();
        
        // Configurar el GridPane para mejor distribuci√≥n
        calendarioGrid.setHgap(3);
        calendarioGrid.setVgap(3);
        calendarioGrid.setStyle("-fx-padding: 12; -fx-background-color: #ecf0f1; -fx-background-radius: 8;");
        
        // Configurar constrains para que las columnas se distribuyan uniformemente
        for (int i = 0; i < 7; i++) {
            ColumnConstraints colConstraint = new ColumnConstraints();
            colConstraint.setPercentWidth(100.0 / 7.0);
            colConstraint.setHalignment(javafx.geometry.HPos.CENTER);
            calendarioGrid.getColumnConstraints().add(colConstraint);
        }
        
        // Agregar encabezados de d√≠as
        String[] diasSemana = {"Dom", "Lun", "Mar", "Mi√©", "Jue", "Vie", "S√°b"};
        for (int i = 0; i < diasSemana.length; i++) {
            Label encabezado = new Label(diasSemana[i]);
            encabezado.setMaxWidth(Double.MAX_VALUE);
            encabezado.setAlignment(Pos.CENTER);
            encabezado.setPrefHeight(30);
            encabezado.setStyle("-fx-font-weight: bold; -fx-background-color: #34495e; -fx-text-fill: white; -fx-padding: 6; -fx-background-radius: 3; -fx-font-size: 12px;");
            calendarioGrid.add(encabezado, i, 0);
        }
        
        // Calcular el primer d√≠a del mes
        LocalDate primerDia = fechaActual.withDayOfMonth(1);
        int diaSemanaInicio = primerDia.getDayOfWeek().getValue() % 7; // Domingo = 0
        
        // Obtener el √∫ltimo d√≠a del mes
        int ultimoDiaDelMes = fechaActual.lengthOfMonth();
        
        // Agregar los d√≠as del mes
        int fila = 1;
        int columna = diaSemanaInicio;
        
        for (int dia = 1; dia <= ultimoDiaDelMes; dia++) {
            LocalDate fecha = LocalDate.of(fechaActual.getYear(), fechaActual.getMonth(), dia);
            Button botonDia = crearBotonDia(fecha);
            
            calendarioGrid.add(botonDia, columna, fila);
            
            columna++;
            if (columna > 6) {
                columna = 0;
                fila++;
            }
        }
    }
    
    private Button crearBotonDia(LocalDate fecha) {
        Button boton = new Button(String.valueOf(fecha.getDayOfMonth()));
        boton.setMaxWidth(Double.MAX_VALUE);
        boton.setMaxHeight(Double.MAX_VALUE);
        boton.setPrefWidth(55);
        boton.setPrefHeight(40);
        
        // Determinar el estado del d√≠a
        boolean esHoy = fecha.equals(LocalDate.now());
        boolean esSeleccionado = fecha.equals(diaSeleccionado);
        List<Evento> eventosDelDia = obtenerEventosDelDia(fecha);
        boolean tieneEventos = eventosDelDia.size() > 0;
        
        // Aplicar estilos seg√∫n el estado
        String estilo = buildEstiloDiaConEventos(esHoy, esSeleccionado, eventosDelDia);
        boton.setStyle(estilo);
        
        // Agregar indicador visual de eventos m√°s compacto
        if (tieneEventos && !esHoy) {
            int cantidadEventos = eventosDelDia.size();
            String texto = fecha.getDayOfMonth() + "\n" + "‚óè".repeat(Math.min(cantidadEventos, 3));
            boton.setText(texto);
        }
        
        // Acci√≥n al hacer clic
        boton.setOnAction(e -> {
            diaSeleccionado = fecha;
            mostrarEventosDelDia(fecha);
            
            // Regenerar calendario para actualizar selecci√≥n
            poblarCalendario();
        });
        
        return boton;
    }
    
    private String buildEstiloDiaConEventos(boolean esHoy, boolean esSeleccionado, List<Evento> eventosDelDia) {
        String baseStyle = "-fx-border-color: #bdc3c7; -fx-border-width: 1; -fx-font-size: 11px; -fx-background-radius: 4; -fx-border-radius: 4; -fx-padding: 3;";
        
        if (esHoy) {
            // D√≠a actual - azul brillante
            return baseStyle + " -fx-background-color: #3498db; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-color: #2980b9; -fx-border-width: 2;";
        } else if (esSeleccionado) {
            // D√≠a seleccionado - gris oscuro
            return baseStyle + " -fx-background-color: #95a5a6; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-color: #7f8c8d; -fx-border-width: 2;";
        } else if (eventosDelDia.size() > 0) {
            // Verificar si hay eventos activos (no terminados)
            boolean tieneEventosActivos = eventosDelDia.stream()
                .anyMatch(evento -> esEventoInscribible(evento));
            
            if (tieneEventosActivos) {
                // D√≠as con eventos activos - naranja
                return baseStyle + " -fx-background-color: #f39c12; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-color: #e67e22;";
            } else {
                // D√≠as con eventos terminados - rojo claro
                return baseStyle + " -fx-background-color: #e74c3c; -fx-text-fill: white; -fx-font-weight: bold; -fx-border-color: #c0392b;";
            }
        } else {
            // D√≠as normales - gris claro
            return baseStyle + " -fx-background-color: #ffffff; -fx-text-fill: #2c3e50; -fx-border-color: #bdc3c7;";
        }
    }

    private void mostrarEventosDelDia(LocalDate fecha) {
        List<Evento> eventosDelDia = obtenerEventosDelDia(fecha);
        tablaEventosDelDia.setItems(FXCollections.observableArrayList(eventosDelDia));
        
        // Actualizar labels
        lblEventosDelDia.setText("üìã Eventos del " + fecha.toString());
        lblCantidadEventos.setText(eventosDelDia.size() + " evento(s)");
    }

    private List<Evento> obtenerEventosDelDia(LocalDate fecha) {
        if (todosLosEventos == null) return FXCollections.emptyObservableList();
        
        return todosLosEventos.stream()
            .filter(evento -> evento.getFechaInicio().equals(fecha))
            .collect(java.util.stream.Collectors.toList());
    }

    /**
     * Actualiza el label del mes y a√±o actual.
     * 
     * Formato: "NOMBRE_MES YYYY" (ej: "JANUARY 2024")
     * Utiliza fechaActual como referencia para mostrar
     * el mes que est√° visualizando el usuario.
     */
    private void actualizarLabelMes() {
        String nombreMes = fechaActual.getMonth().toString();
        int a√±o = fechaActual.getYear();
        lblMesAno.setText(nombreMes + " " + a√±o);
    }

    /**
     * Actualiza labels informativos generales.
     * 
     * M√©todo placeholder para futuras estad√≠sticas
     * o informaci√≥n adicional de la vista.
     */
    private void actualizarLabels() {
        // Actualizar informaci√≥n general
    }

    /**
     * M√©todo temporal de compatibilidad.
     * 
     * Redirige al nuevo m√©todo cargarTodosLosEventos()
     * y actualiza la vista del d√≠a seleccionado.
     * 
     * @deprecated Usar cargarTodosLosEventos() directamente
     */
    private void cargarEventosDisponibles() {
        // Redireccionar al nuevo m√©todo
        cargarTodosLosEventos();
        mostrarEventosDelDia(diaSeleccionado);
    }

    // =============== M√âTODOS DE CREACI√ìN DE COMPONENTES VISUALES ===============

    // =============== M√âTODOS DE ACCIONES DE USUARIO ===============
    
    /**
     * Gestiona el proceso completo de inscripci√≥n de personas a eventos.
     * 
     * FLUJO DE INSCRIPCI√ìN:
     * 1. Abre modal de b√∫squeda de personas (BuscarPersonaController)
     * 2. Permite al usuario seleccionar persona a inscribir
     * 3. Si se selecciona persona, procesa la inscripci√≥n
     * 4. Maneja cancelaciones y errores apropiadamente
     * 
     * INTERFAZ MODAL:
     * - T√≠tulo: "üîç Buscar Persona para Inscribir"
     * - Modal APPLICATION_MODAL (bloquea ventana padre)
     * - Integraci√≥n completa con BuscarPersonaController
     * 
     * VALIDACIONES DELEGADAS:
     * - Todas las validaciones de negocio se realizan en procesarInscripcion()
     * - Estado del evento, cupo, duplicados, responsabilidad
     * - Feedback inmediato al usuario sobre √©xito/fallos
     * 
     * ACTUALIZACI√ìN DE VISTA:
     * - Si la inscripci√≥n es exitosa, actualiza autom√°ticamente la vista
     * - Recarga calendario y tabla para reflejar cambios
     * 
     * @param evento El evento al cual inscribir la persona
     * @see #procesarInscripcion(Evento, Persona)
     * @see BuscarPersonaController
     */
    private void inscribirPersonaEnEvento(Evento evento) {
        try {
            // Abrir ventana de b√∫squeda de persona
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/BuscarPersona.fxml"));
            Parent root = loader.load();
            
            BuscarPersonaController buscarController = loader.getController();
            
            // Crear y mostrar el modal
            Stage dialogStage = new Stage();
            dialogStage.setTitle("üîç Buscar Persona para Inscribir");
            dialogStage.initModality(Modality.APPLICATION_MODAL);
            dialogStage.setScene(new Scene(root));
            dialogStage.showAndWait();
            
            // Obtener la persona seleccionada
            Persona personaAInscribir = buscarController.getSeleccionada();
            
            if (personaAInscribir == null) {
                // El usuario cancel√≥ o no seleccion√≥ ninguna persona
                return;
            }
            
            // Aplicar toda la l√≥gica de validaci√≥n e inscripci√≥n
            procesarInscripcion(evento, personaAInscribir);
            
        } catch (IOException e) {
            mostrarAlertaError("Error", "No se pudo abrir la ventana de b√∫squeda de personas.");
            e.printStackTrace();
        }
    }
    
    /**
     * Procesa la inscripci√≥n de una persona a un evento con validaciones exhaustivas.
     * 
     * VALIDACIONES EN SECUENCIA (falla r√°pido):
     * 1. Estado del evento: Solo CONFIRMADO o EN_EJECUCION
     * 2. Fechas: Evento no debe haber terminado
     * 3. Responsabilidad: Responsables no pueden inscribirse
     * 4. Duplicados: Persona no debe estar ya inscripta
     * 5. Cupo: Verificaci√≥n de disponibilidad para eventos TieneCupo
     * 
     * L√ìGICA DE RESPONSABILIDAD:
     * - Utiliza EventoService.esResponsableDelEvento() para verificaci√≥n
     * - Previene conflictos de inter√©s organizacional
     * 
     * L√ìGICA DE CUPO:
     * - Solo aplica a eventos que implementan TieneCupo
     * - Calcula disponibilidad en tiempo real
     * - Considera participantes actuales vs. cupo m√°ximo
     * 
     * PERSISTENCIA:
     * - Utiliza ParticipanteService.inscribirPersona() para grabar
     * - Manejo de excepciones con feedback espec√≠fico
     * - Actualizaci√≥n autom√°tica de vista tras √©xito
     * 
     * FEEDBACK AL USUARIO:
     * - Mensajes espec√≠ficos para cada tipo de validaci√≥n
     * - Alertas diferenciadas: Info (validaciones), Error (sistema), √âxito (confirmaci√≥n)
     * 
     * @param evento El evento al cual inscribir
     * @param persona La persona a inscribir
     * @see #esEventoInscribible(Evento)
     * @see #obtenerRazonNoInscribible(Evento)
     * @see EventoService#esResponsableDelEvento(Persona, Evento)
     * @see ParticipanteService#estaInscripto(Persona, Evento)
     * @see ParticipanteService#inscribirPersona(Evento, Persona)
     */
    private void procesarInscripcion(Evento evento, Persona persona) {
        // Validar estado del evento
        if (!esEventoInscribible(evento)) {
            String razon = obtenerRazonNoInscribible(evento);
            mostrarAlertaInfo("Evento no disponible", razon);
            return;
        }
        
        // Verificar si es responsable del evento
        if (eventoService.esResponsableDelEvento(persona, evento)) {
            mostrarAlertaInfo("No se puede inscribir", 
                persona.getNombre() + " " + persona.getApellido() + " es responsable de este evento y no puede inscribirse.");
            return;
        }
        
        // Verificar si ya est√° inscripto
        if (participanteService.estaInscripto(persona, evento)) {
            mostrarAlertaInfo("Ya inscripto", 
                persona.getNombre() + " " + persona.getApellido() + " ya est√° inscripto a este evento.");
            return;
        }
        
        // Verificar cupo disponible
        if (evento instanceof com.example.modelo.TieneCupo) {
            com.example.modelo.TieneCupo cupoEvento = (com.example.modelo.TieneCupo) evento;
            int inscriptos = evento.getParticipantes() != null ? evento.getParticipantes().size() : 0;
            int cupoDisponible = cupoEvento.getCupoMaximo() - inscriptos;
            if (cupoDisponible <= 0) {
                mostrarAlertaInfo("Sin cupo disponible", "No hay cupo disponible para este evento.");
                return;
            }
        }
        
        // Intentar realizar la inscripci√≥n
        try {
            participanteService.inscribirPersona(evento, persona);
            mostrarAlertaExito("Inscripci√≥n exitosa", 
                persona.getNombre() + " " + persona.getApellido() + " se ha inscrito correctamente al evento '" + evento.getNombre() + "'.");
            
            // Actualizar la vista para reflejar los cambios
            actualizarVista();
            
        } catch (Exception e) {
            mostrarAlertaError("Error al inscribir", "Error al inscribir a la persona: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    // =============== M√âTODOS DE VALIDACI√ìN DE EVENTOS Y FECHAS ===============
    
    /**
     * Verifica si un evento est√° disponible para inscripci√≥n considerando estado y fechas.
     * 
     * CRITERIOS DE INSCRIBIBILIDAD:
     * 1. Estado del evento: Debe ser CONFIRMADO o EN_EJECUCION
     * 2. Validaci√≥n temporal: El evento no debe haber terminado por fechas
     * 
     * ESTADOS V√ÅLIDOS:
     * - CONFIRMADO: Evento aprobado y listo para inscripciones
     * - EN_EJECUCION: Evento en curso que a√∫n acepta participantes
     * 
     * ESTADOS INV√ÅLIDOS:
     * - PLANIFICADO: Eventos en borrador, no confirmados
     * - FINALIZADO: Eventos formalmente cerrados
     * 
     * VALIDACI√ìN TEMPORAL:
     * - Utiliza eventoYaTermino() para verificar fechas
     * - Considera duraci√≥n del evento para calcular finalizaci√≥n
     * - Previene inscripciones a eventos ya concluidos
     * 
     * Este m√©todo es fundamental para la l√≥gica de botones en la tabla
     * y para todas las validaciones de inscripci√≥n en el sistema.
     * 
     * @param evento El evento a evaluar para inscripci√≥n
     * @return true si el evento acepta inscripciones, false en caso contrario
     * @see #eventoYaTermino(Evento)
     * @see EstadoEvento
     */
    private boolean esEventoInscribible(Evento evento) {
        // Verificar estado
        EstadoEvento estado = evento.getEstado();
        if (estado != EstadoEvento.CONFIRMADO && estado != EstadoEvento.EN_EJECUCION) {
            return false;
        }
        
        // Verificar fechas
        return !eventoYaTermino(evento);
    }
    
    /**
     * Calcula la fecha de finalizaci√≥n real del evento.
     * 
     * ALGORITMO DE C√ÅLCULO:
     * - Toma la fecha de inicio del evento
     * - Suma la duraci√≥n en d√≠as (menos 1 para incluir el d√≠a de inicio)
     * - Ejemplo: Evento que empieza 2024-01-15 con duraci√≥n 3 d√≠as
     *   Finaliza el 2024-01-17 (inicio + 2 d√≠as adicionales)
     * 
     * CASOS ESPECIALES:
     * - Eventos de 1 d√≠a: Finalizan el mismo d√≠a que empiezan
     * - Eventos multi-d√≠a: Duraci√≥n incluye el d√≠a de inicio
     * 
     * Este c√°lculo es utilizado por m√∫ltiples m√©todos para
     * determinar si un evento sigue activo o ya termin√≥.
     * 
     * @param evento El evento cuya fecha de finalizaci√≥n se desea calcular
     * @return LocalDate con la fecha exacta de finalizaci√≥n
     */
    private LocalDate calcularFechaFinalizacion(Evento evento) {
        return evento.getFechaInicio().plusDays(evento.getDuraci√≥nDias() - 1);
    }
    
    /**
     * Verifica si un evento ya termin√≥ seg√∫n las fechas calculadas.
     * 
     * L√ìGICA DE COMPARACI√ìN:
     * - Calcula fecha de finalizaci√≥n usando duraci√≥n del evento
     * - Compara con la fecha actual (LocalDate.now())
     * - Retorna true si hoy es posterior a la fecha de finalizaci√≥n
     * 
     * IMPORTANCIA TEMPORAL:
     * - Un evento que termina "hoy" a√∫n se considera activo
     * - Solo eventos que terminaron "ayer" o antes se marcan como terminados
     * - Proporciona un d√≠a completo de gracia para participaci√≥n
     * 
     * CASOS DE USO:
     * - Filtrado en vista ciudadana (no mostrar eventos pasados)
     * - Validaci√≥n de inscripciones
     * - Actualizaci√≥n autom√°tica de estados visuales
     * - Formato inteligente de estados en tablas
     * 
     * @param evento El evento a evaluar temporalmente
     * @return true si el evento ya termin√≥, false si a√∫n est√° activo
     * @see #calcularFechaFinalizacion(Evento)
     */
    private boolean eventoYaTermino(Evento evento) {
        LocalDate fechaFinalizacion = calcularFechaFinalizacion(evento);
        return LocalDate.now().isAfter(fechaFinalizacion);
    }
    
    /**
     * Obtiene la raz√≥n espec√≠fica por la cual un evento no es inscribible.
     * 
     * DIAGN√ìSTICO DETALLADO:
     * 1. Eval√∫a estado formal del evento
     * 2. Eval√∫a validaci√≥n temporal con fechas espec√≠ficas
     * 3. Retorna mensaje descriptivo para feedback de usuario
     * 
     * MENSAJES POR ESTADO:
     * - PLANIFICADO: "El evento a√∫n no ha sido confirmado"
     * - FINALIZADO: "El evento ya ha finalizado"
     * - Terminado por fechas: "El evento termin√≥ el YYYY-MM-DD. No se permiten m√°s inscripciones"
     * - Fallback: "El evento no est√° disponible para inscripci√≥n"
     * 
     * INFORMACI√ìN CONTEXTUAL:
     * - Para eventos terminados por fechas, incluye fecha exacta de finalizaci√≥n
     * - Proporciona informaci√≥n espec√≠fica para que usuarios entiendan la restricci√≥n
     * 
     * Utilizado principalmente en procesarInscripcion() para mostrar
     * feedback espec√≠fico cuando una inscripci√≥n es rechazada.
     * 
     * @param evento El evento cuya raz√≥n de no-inscribibilidad se desea obtener
     * @return Cadena descriptiva explicando por qu√© no se puede inscribir
     * @see #procesarInscripcion(Evento, Persona)
     * @see #esEventoInscribible(Evento)
     */
    private String obtenerRazonNoInscribible(Evento evento) {
        EstadoEvento estado = evento.getEstado();
        
        if (estado == EstadoEvento.PLANIFICADO) {
            return "El evento a√∫n no ha sido confirmado.";
        }
        
        if (estado == EstadoEvento.FINALIZADO) {
            return "El evento ya ha finalizado.";
        }
        
        if (eventoYaTermino(evento)) {
            LocalDate fechaFin = calcularFechaFinalizacion(evento);
            return String.format("El evento termin√≥ el %s. No se permiten m√°s inscripciones.", fechaFin);
        }
        
        return "El evento no est√° disponible para inscripci√≥n.";
    }

    /**
     * Abre modal con informaci√≥n detallada de un evento espec√≠fico.
     * 
     * FUNCIONALIDAD DEL MODAL:
     * - Carga vista detallesEvento.fxml con DetallesEventoController
     * - Pasa el evento seleccionado al controlador de detalles
     * - Modal APPLICATION_MODAL que bloquea ventana padre
     * - Ventana no redimensionable para layout consistente
     * 
     * INFORMACI√ìN MOSTRADA:
     * - Detalles completos del evento (nombre, descripci√≥n, fechas)
     * - Informaci√≥n de responsables y participantes
     * - Estado actual y restricciones de inscripci√≥n
     * - Cualquier informaci√≥n adicional espec√≠fica del tipo de evento
     * 
     * INTEGRACI√ìN:
     * - Utiliza DetallesEventoController para manejo de la vista
     * - Configuraci√≥n autom√°tica del evento mediante setEvento()
     * - Manejo de errores con alertas informativas
     * 
     * EXPERIENCIA DE USUARIO:
     * - T√≠tulo din√°mico con nombre del evento
     * - Modal centrado y bien proporcionado
     * - F√°cil acceso desde botones de acci√≥n en tabla
     * 
     * @param evento El evento cuyos detalles se desean visualizar
     * @see DetallesEventoController
     */
    private void verDetallesEvento(Evento evento) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/detallesEvento.fxml"));
            Parent root = loader.load();

            // Obtener el controlador y configurar el evento
            DetallesEventoController controller = loader.getController();
            controller.setEvento(evento);

            // Crear y mostrar el di√°logo
            Stage dialogStage = new Stage();
            dialogStage.setTitle("Detalles del evento - " + evento.getNombre());
            dialogStage.setScene(new Scene(root));
            dialogStage.initModality(Modality.APPLICATION_MODAL);
            dialogStage.setResizable(false);
            dialogStage.showAndWait();

        } catch (Exception e) {
            mostrarAlertaInfo("Error", "No se pudieron cargar los detalles del evento");
            e.printStackTrace();
        }
    }

    // =============== M√âTODOS DE CONFIGURACI√ìN EXTERNA ===============
    
    /**
     * Establece la persona autenticada en el sistema.
     * 
     * FUNCIONALIDAD ACTUAL:
     * - Almacena referencia a la persona logueada
     * - Recarga eventos disponibles para la nueva sesi√≥n
     * 
     * FUNCIONALIDAD FUTURA PREPARADA:
     * - Filtrado de eventos por preferencias de usuario
     * - Personalizaci√≥n de vistas seg√∫n perfil
     * - Historial de eventos asistidos
     * - Recomendaciones personalizadas
     * 
     * RECARGA AUTOM√ÅTICA:
     * - Al cambiar usuario, recarga toda la vista
     * - Garantiza datos actualizados para nueva sesi√≥n
     * - Resetea calendario al d√≠a actual
     * 
     * Aunque actualmente la vista ciudadana muestra todos los eventos
     * disponibles independientemente del usuario, este m√©todo est√°
     * preparado para futuras funcionalidades personalizadas.
     * 
     * @param persona La persona autenticada que usar√° la vista
     */
    public void setPersonaLogueada(Persona persona) {
        this.personaLogueada = persona;
        cargarEventosDisponibles(); // Recargar eventos cuando se establece el usuario
    }

    // =============== M√âTODOS DE INTERFAZ DE USUARIO (ALERTAS) ===============
    
    /**
     * Muestra alerta informativa al usuario.
     * 
     * CARACTER√çSTICAS:
     * - Tipo: INFORMATION (√≠cono informativo azul)
     * - Sin encabezado (headerText = null) para dise√±o limpio
     * - Modal que requiere confirmaci√≥n del usuario
     * 
     * CASOS DE USO:
     * - Validaciones de inscripci√≥n (cupo, duplicados, responsabilidad)
     * - Informaci√≥n sobre estados de eventos
     * - Confirmaciones de acciones no cr√≠ticas
     * - Mensajes explicativos para restricciones
     * 
     * @param titulo T√≠tulo de la ventana de alerta
     * @param mensaje Contenido informativo para el usuario
     */
    private void mostrarAlertaInfo(String titulo, String mensaje) {
        Alert alerta = new Alert(Alert.AlertType.INFORMATION);
        alerta.setTitle(titulo);
        alerta.setHeaderText(null);
        alerta.setContentText(mensaje);
        alerta.showAndWait();
    }
    
    /**
     * Muestra alerta de √©xito con formato especial.
     * 
     * CARACTER√çSTICAS:
     * - Tipo: INFORMATION con encabezado personalizado
     * - Encabezado con emoji de confirmaci√≥n: "‚úÖ [t√≠tulo]"
     * - Dise√±o positivo para reforzar acciones exitosas
     * 
     * CASOS DE USO:
     * - Confirmaci√≥n de inscripciones exitosas
     * - Finalizaci√≥n correcta de operaciones
     * - Feedback positivo de acciones completadas
     * 
     * DISE√ëO UX:
     * - Color y emoji refuerzan el mensaje positivo
     * - Proporciona sensaci√≥n de logro al usuario
     * - Confirma que la acci√≥n se realiz√≥ correctamente
     * 
     * @param titulo T√≠tulo de la ventana de alerta
     * @param mensaje Contenido de confirmaci√≥n para el usuario
     */
    private void mostrarAlertaExito(String titulo, String mensaje) {
        Alert alerta = new Alert(Alert.AlertType.INFORMATION);
        alerta.setTitle(titulo);
        alerta.setHeaderText("‚úÖ " + titulo);
        alerta.setContentText(mensaje);
        alerta.showAndWait();
    }
    
    /**
     * Muestra alerta de error del sistema.
     * 
     * CARACTER√çSTICAS:
     * - Tipo: ERROR (√≠cono de error rojo)
     * - Encabezado con emoji de error: "‚ùå [t√≠tulo]"
     * - Dise√±o cr√≠tico para errores del sistema
     * 
     * CASOS DE USO:
     * - Errores de conexi√≥n a base de datos
     * - Fallos en carga de vistas/recursos
     * - Excepciones no controladas del sistema
     * - Errores t√©cnicos que requieren atenci√≥n
     * 
     * DIFERENCIA CON INFO:
     * - Errores vs. validaciones de negocio
     * - Problemas t√©cnicos vs. restricciones funcionales
     * - Requiere investigaci√≥n vs. comportamiento esperado
     * 
     * @param titulo T√≠tulo de la ventana de alerta
     * @param mensaje Descripci√≥n del error para el usuario
     */
    private void mostrarAlertaError(String titulo, String mensaje) {
        Alert alerta = new Alert(Alert.AlertType.ERROR);
        alerta.setTitle(titulo);
        alerta.setHeaderText("‚ùå " + titulo);
        alerta.setContentText(mensaje);
        alerta.showAndWait();
    }
}
