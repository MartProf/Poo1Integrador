package com.example.controlador;

import com.example.modelo.Persona;
import com.example.servicio.PersonaService;
import javafx.collections.FXCollections;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.Stage;
import java.util.ArrayList;
import java.util.List;

/**
 * Controlador para la interfaz de b√∫squeda y selecci√≥n de personas en el sistema municipal de eventos.
 * 
 * Este controlador implementa un modal avanzado de b√∫squeda que permite a los usuarios encontrar
 * y seleccionar personas registradas en el sistema para asociarlas a eventos como participantes
 * u organizadores. Soporta tanto selecci√≥n simple como m√∫ltiple con filtrado en tiempo real.
 * 
 * Caracter√≠sticas Principales:
 * - B√∫squeda Inteligente: Filtrado en tiempo real por DNI, nombre o apellido
 * - Selecci√≥n Flexible: Modo simple o m√∫ltiple configurable
 * - Registro Integrado: Opci√≥n para crear nuevas personas sin salir del modal
 * - UI Responsiva: Lista personalizada con feedback visual y contadores
 * 
 * Patrones de Uso:
 * // Selecci√≥n simple para organizador de evento
 * BuscarPersonaModalHelper.mostrarModal(false); // ‚Üí 1 persona
 * 
 * // Selecci√≥n m√∫ltiple para participantes
 * BuscarPersonaModalHelper.mostrarModal(true);  // ‚Üí N personas
 * 
 * Integraci√≥n con el Sistema:
 * Este controlador se utiliza desde m√∫ltiples puntos del sistema:
 * - NuevoEventoController: Selecci√≥n de organizadores
 * - EventosDisponiblesController: Registro de participantes
 * - MisEventosController: Gesti√≥n de asistentes
 * 
 * Arquitectura UX:
 * Implementa el patr√≥n Modal Search con las siguientes capacidades:
 * - Carga inicial de todas las personas disponibles
 * - Filtrado incremental sin p√©rdida de contexto
 * - Selecci√≥n visual con feedback inmediato
 * - Escape hatch para registro de nuevas personas
 * 
 * @author Sistema Municipal de Eventos
 * @version 1.0
 * @since 2024
 * 
 * @see PersonaService
 * @see BuscarPersonaModalHelper
 * @see RegistroController
 */
public class BuscarPersonaController {

    // ========================================
    // COMPONENTES DE INTERFAZ JAVAFX
    // ========================================
    
    /**
     * Campo de texto para entrada de filtros de b√∫squeda.
     * Soporta b√∫squeda por DNI, nombre, apellido o combinaciones.
     */
    @FXML
    private TextField txtFiltro;

    /**
     * Bot√≥n para ejecutar b√∫squeda manual (aunque tambi√©n funciona en tiempo real).
     */
    @FXML
    private Button btnBuscar;
    
    /**
     * Bot√≥n para limpiar filtros y mostrar todas las personas.
     */
    @FXML
    private Button btnLimpiar;

    /**
     * Lista visual de personas que muestra los resultados filtrados.
     * Configurada con celdas personalizadas para mejor UX.
     */
    @FXML
    private ListView<Persona> listResultados;

    /**
     * Bot√≥n para confirmar selecci√≥n y cerrar el modal.
     * Se habilita/deshabilita seg√∫n el estado de selecci√≥n.
     */
    @FXML
    private Button btnSeleccionar;

    /**
     * Bot√≥n para cancelar la operaci√≥n y cerrar el modal sin selecci√≥n.
     */
    @FXML
    private Button btnCancelar;

    /**
     * Bot√≥n para abrir el modal de registro de nueva persona.
     * Permite crear personas sin salir del flujo de b√∫squeda.
     */
    @FXML
    private Button btnRegistrarNueva;
    
    /**
     * Etiqueta con instrucciones din√°micas seg√∫n el modo de selecci√≥n.
     */
    @FXML
    private Label lblSubtitulo;
    
    /**
     * Etiqueta con feedback del estado actual de la b√∫squeda.
     */
    @FXML
    private Label lblResultadosInfo;
    
    /**
     * Etiqueta con contador de resultados encontrados.
     */
    @FXML
    private Label lblContadorResultados;

    // ========================================
    // SERVICIOS Y L√ìGICA DE NEGOCIO
    // ========================================
    
    /**
     * Servicio para operaciones CRUD con entidades Persona.
     * Inyectado mediante el patr√≥n Service Locator.
     */
    private final PersonaService personaService;

    // ========================================
    // ESTADO DEL CONTROLADOR
    // ========================================
    
    /**
     * Indica si el modal est√° configurado para selecci√≥n m√∫ltiple.
     * false = selecci√≥n simple, true = selecci√≥n m√∫ltiple con Ctrl+Click.
     */
    private boolean multiple = false;

    /**
     * Resultado de selecci√≥n simple - contiene la persona seleccionada.
     * Solo se usa cuando multiple = false.
     */
    private Persona seleccionada;
    
    /**
     * Resultados de selecci√≥n m√∫ltiple - contiene las personas seleccionadas.
     * Solo se usa cuando multiple = true.
     */
    private List<Persona> seleccionadas = new ArrayList<>();
    
    /**
     * Cache completo de todas las personas en el sistema.
     * Se carga una vez al inicializar y se reutiliza para filtrado local.
     */
    private List<Persona> todasLasPersonas = new ArrayList<>();
    
    /**
     * Lista observable vinculada al ListView para mostrar resultados filtrados.
     * Se actualiza din√°micamente seg√∫n los filtros aplicados.
     */
    private javafx.collections.ObservableList<Persona> personasFiltradas;

    /**
     * Constructor que inicializa el controlador con las dependencias necesarias.
     * 
     * Utiliza el patr√≥n Service Locator para obtener la instancia del servicio
     * de personas. Este enfoque permite desacoplamiento mientras mantiene simplicidad
     * en la gesti√≥n de dependencias.
     * 
     * @implNote El constructor es llamado autom√°ticamente por JavaFX antes de
     *           la inyecci√≥n de componentes FXML y la llamada a initialize()
     */
    public BuscarPersonaController() {
        this.personaService = new PersonaService();
    }

    /**
     * Inicializa el controlador despu√©s de que JavaFX haya inyectado todos los componentes FXML.
     * 
     * Este m√©todo configura todo el comportamiento del modal de b√∫squeda:
     * - Configura el ListView con celdas personalizadas
     * - Inicializa las colecciones observables para data binding
     * - Carga todas las personas disponibles en el sistema
     * - Vincula eventos de botones y listeners de filtrado en tiempo real
     * - Establece el estado inicial de la interfaz
     * 
     * Flujo de Inicializaci√≥n:
     * 1. Configurar ListView ‚Üí celdas personalizadas + listeners de selecci√≥n
     * 2. Inicializar ObservableList ‚Üí data binding con ListView
     * 3. Cargar datos ‚Üí todas las personas desde base de datos
     * 4. Vincular eventos ‚Üí botones + filtrado en tiempo real
     * 5. Estado inicial ‚Üí bot√≥n seleccionar deshabilitado
     * 
     * @implNote Este m√©todo es llamado autom√°ticamente por JavaFX despu√©s de
     *           cargar el archivo FXML y antes de mostrar la ventana
     */
    public void initialize() {
        // Configurar ListView primero
        configurarListView();
        
        // Inicializar la ObservableList
        personasFiltradas = FXCollections.observableArrayList();
        listResultados.setItems(personasFiltradas);
        
        // Cargar todas las personas
        cargarTodasLasPersonas();
        
        // Configurar eventos de botones
        btnBuscar.setOnAction(e -> aplicarFiltro());
        btnLimpiar.setOnAction(e -> limpiar());
        btnSeleccionar.setOnAction(e -> seleccionar());
        btnCancelar.setOnAction(e -> cerrar());
        btnRegistrarNueva.setOnAction(e -> registrarNuevaPersona());
        
        // Filtrado en tiempo real
        txtFiltro.textProperty().addListener((observable, oldValue, newValue) -> {
            aplicarFiltro();
        });
        
        // Estado inicial
        btnSeleccionar.setDisable(true);
    }

    /**
     * Configura la apariencia y comportamiento del ListView de resultados.
     * 
     * Este m√©todo implementa una f√°brica de celdas personalizada que transforma
     * cada objeto Persona en una representaci√≥n visual rica con iconos, formato
     * estructurado y estilos CSS. Tambi√©n configura los listeners necesarios
     * para el manejo de selecci√≥n.
     * 
     * Caracter√≠sticas de las Celdas Personalizadas:
     * - Formato Visual: "üë§ Nombre Apellido (DNI: 12345678)"
     * - Protecci√≥n de Datos: Maneja valores null con fallbacks
     * - Estilo Consistente: Padding, fuentes y bordes uniformes
     * - Estados Visuales: Diferentes estilos para celdas vac√≠as/llenas
     * 
     * Listeners Configurados:
     * - Selecci√≥n: Habilita/deshabilita bot√≥n seg√∫n selecci√≥n
     * - Items: Debug listener para cambios en la colecci√≥n
     * 
     * @implNote Utiliza el patr√≥n Factory Method para crear celdas personalizadas
     *           y el patr√≥n Observer para reaccionar a cambios de selecci√≥n
     */
    private void configurarListView() {
        // Configurar c√≥mo se muestra cada persona en la lista
        listResultados.setCellFactory(param -> new ListCell<Persona>() {
            @Override
            protected void updateItem(Persona persona, boolean empty) {
                super.updateItem(persona, empty);
                if (empty || persona == null) {
                    setText(null);
                    setGraphic(null);
                    setStyle("");
                } else {
                    // Verificar que los datos existen
                    String nombre = persona.getNombre() != null ? persona.getNombre() : "SIN_NOMBRE";
                    String apellido = persona.getApellido() != null ? persona.getApellido() : "SIN_APELLIDO";
                    int dni = persona.getDni();
                    
                    String texto = String.format("üë§ %s %s (DNI: %s)", nombre, apellido, dni);
                    setText(texto);
                    setStyle("-fx-padding: 10; -fx-font-size: 14px; -fx-background-color: #f9f9f9; -fx-border-color: #eee; -fx-border-width: 0 0 1 0;");
                }
            }
        });
        
        // Listener para selecci√≥n (habilitar/deshabilitar bot√≥n)
        listResultados.getSelectionModel().selectedItemProperty().addListener(
            (observable, oldValue, newValue) -> {
                btnSeleccionar.setDisable(newValue == null);
            }
        );
        
        // Debug: Listener para cambios en los items
        listResultados.itemsProperty().addListener((observable, oldValue, newValue) -> {});
    }

    /**
     * Carga todas las personas disponibles en el sistema y las muestra en la interfaz.
     * 
     * Este m√©todo implementa una estrategia de carga eager donde todas las personas
     * se obtienen de una vez y se almacenan en cache local para permitir filtrado
     * instant√°neo sin consultas adicionales a la base de datos.
     * 
     * Flujo de Carga:
     * 1. Mostrar indicador de carga ‚Üí "Cargando personas..."
     * 2. Obtener datos ‚Üí PersonaService.obtenerTodas()
     * 3. Actualizar cache ‚Üí todasLasPersonas = resultado
     * 4. Actualizar UI ‚Üí personasFiltradas.setAll() + refresh()
     * 5. Feedback ‚Üí contador + mensaje de estado
     * 
     * Ventajas del Enfoque Eager:
     * - Filtrado Instant√°neo: Sin latencia en b√∫squedas
     * - Trabajo Offline: Datos disponibles sin conexi√≥n continua
     * - UX Fluida: Respuesta inmediata a interacciones del usuario
     * 
     * Manejo de Errores:
     * Captura excepciones durante la carga y muestra mensajes de error apropiados
     * en la interfaz, permitiendo que el usuario comprenda el problema sin crashes.
     * 
     * @implNote Utiliza setAll() en lugar de clear() + addAll() para minimizar
     *           eventos de cambio y mejorar performance de la UI
     */
    private void cargarTodasLasPersonas() {
        try {
            lblResultadosInfo.setText("Cargando personas...");
            
            // Cargar todas las personas del sistema
            todasLasPersonas = personaService.obtenerTodas();
            
            // Actualizar la ObservableList existente
            personasFiltradas.setAll(todasLasPersonas);
            
            // Forzar refresh del ListView
            listResultados.refresh();
            
            actualizarContadorResultados(todasLasPersonas.size());
            
            lblResultadosInfo.setText("‚úÖ Todas las personas cargadas - Puede buscar escribiendo en el campo");
            
        } catch (Exception e) {
            lblResultadosInfo.setText("‚ùå Error cargando personas: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Aplica filtros de b√∫squeda en tiempo real sobre el cache de personas.
     * 
     * Este m√©todo implementa un algoritmo de b√∫squeda flexible que permite
     * encontrar personas utilizando m√∫ltiples criterios de forma simult√°nea.
     * El filtrado se realiza completamente en memoria para m√°xima responsividad.
     * 
     * Criterios de B√∫squeda Soportados:
     * - DNI: B√∫squeda exacta por n√∫mero de documento
     * - Nombre: B√∫squeda case-insensitive por nombre
     * - Apellido: B√∫squeda case-insensitive por apellido
     * - Nombre Completo: B√∫squeda en "Nombre Apellido"
     * 
     * L√≥gica de Filtrado:
     * Si filtro est√° vac√≠o:
     *   ‚Üí Mostrar todas las personas (vista completa)
     * Si filtro tiene contenido:
     *   ‚Üí Aplicar OR l√≥gico entre todos los criterios
     *   ‚Üí DNI contains filtro OR nombre contains filtro OR apellido contains filtro OR nombreCompleto contains filtro
     * 
     * Caracter√≠sticas UX:
     * - Feedback Inmediato: Actualizaci√≥n visual instant√°nea
     * - Tolerancia a Espacios: trim() autom√°tico de entrada
     * - Case Insensitive: B√∫squeda independiente de may√∫sculas
     * - Contadores Din√°micos: N√∫mero de resultados en tiempo real
     * 
     * @implNote Utiliza Stream API con predicados compuestos para filtrado eficiente
     *           y toList() para compatibilidad con Java 17+
     */
    private void aplicarFiltro() {
        String filtro = txtFiltro.getText();
        
        if (filtro == null || filtro.trim().isEmpty()) {
            // Mostrar todas las personas
            personasFiltradas.setAll(todasLasPersonas);
            lblResultadosInfo.setText("‚úÖ Mostrando todas las personas");
        } else {
            // Filtrar por DNI o nombre
            String filtroLower = filtro.trim().toLowerCase();
            List<Persona> resultadosFiltrados = todasLasPersonas.stream()
                .filter(persona -> 
                    String.valueOf(persona.getDni()).contains(filtro) ||
                    persona.getNombre().toLowerCase().contains(filtroLower) ||
                    persona.getApellido().toLowerCase().contains(filtroLower) ||
                    (persona.getNombre() + " " + persona.getApellido()).toLowerCase().contains(filtroLower)
                )
                .toList();
            
            personasFiltradas.setAll(resultadosFiltrados);
            
            if (resultadosFiltrados.isEmpty()) {
                lblResultadosInfo.setText("‚ùå No se encontraron personas que coincidan con '" + filtro + "'");
            } else {
                lblResultadosInfo.setText("‚úÖ Filtrado por: '" + filtro + "'");
            }
        }
        
        actualizarContadorResultados(personasFiltradas.size());
        
        }

    /**
     * Limpia todos los filtros aplicados y restaura la vista completa de personas.
     * 
     * Este m√©todo proporciona un mecanismo de "reset" que permite al usuario
     * volver r√°pidamente al estado inicial sin perder el contexto de la b√∫squeda.
     * Es especialmente √∫til cuando los filtros han reducido demasiado los resultados.
     * 
     * Acciones Realizadas:
     * - Limpiar Campo: txtFiltro.clear() ‚Üí campo vac√≠o
     * - Restaurar Vista: personasFiltradas = todasLasPersonas
     * - Actualizar Contador: Mostrar total de personas
     * - Feedback Visual: Mensaje confirmando la limpieza
     * 
     * Protecci√≥n contra Errores:
     * Incluye validaciones de null para evitar NullPointerException en casos
     * donde la inicializaci√≥n no haya completado correctamente.
     * 
     * @implNote Se ejecuta tanto por acci√≥n directa del bot√≥n como por efectos
     *           secundarios de otros m√©todos que requieren reset de estado
     */
    private void limpiar() {
        txtFiltro.clear();
        // Al limpiar, mostrar todas las personas nuevamente
        if (personasFiltradas != null && todasLasPersonas != null) {
            personasFiltradas.setAll(todasLasPersonas);
            actualizarContadorResultados(todasLasPersonas.size());
            lblResultadosInfo.setText("‚úÖ Filtro limpiado - Mostrando todas las personas");
        }
    }

    /**
     * Actualiza los elementos de feedback visual con el n√∫mero actual de resultados.
     * 
     * Este m√©todo centraliza la l√≥gica de actualizaci√≥n de contadores y estado
     * de botones, asegurando consistencia en toda la interfaz cuando cambia
     * el n√∫mero de resultados visibles.
     * 
     * Elementos Actualizados:
     * - Contador Visual: "X persona(s) encontrada(s)"
     * - Estado de Bot√≥n: Deshabilitar si no hay resultados
     * - Pluralizaci√≥n: Gram√°tica correcta seg√∫n cantidad
     * 
     * L√≥gica de Estado:
     * Si cantidad == 0:
     *   ‚Üí Deshabilitar bot√≥n seleccionar (no hay qu√© seleccionar)
     * Si cantidad > 0:
     *   ‚Üí Habilitar bot√≥n seleccionar (hay opciones disponibles)
     * 
     * @param cantidad N√∫mero actual de personas en los resultados filtrados
     * 
     * @implNote Utiliza operador ternario para pluralizaci√≥n gramaticalmente correcta
     */
    private void actualizarContadorResultados(int cantidad) {
        String texto = cantidad + (cantidad == 1 ? " persona encontrada" : " personas encontradas");
        lblContadorResultados.setText(texto);
        btnSeleccionar.setDisable(cantidad == 0);
        
    }

    /**
     * Configura el modo de selecci√≥n del modal (simple vs m√∫ltiple).
     * 
     * Este m√©todo permite que el mismo controlador y vista FXML sean reutilizados
     * para diferentes casos de uso en el sistema, adaptando din√°micamente el
     * comportamiento seg√∫n las necesidades del contexto que lo invoca.
     * 
     * Modos de Selecci√≥n:
     * - Simple (false): Selecci√≥n de una sola persona
     *   - Usado para: Seleccionar organizador de evento
     *   - UI: Click normal para seleccionar
     *   - Resultado: Una sola persona en getSeleccionada()
     * - M√∫ltiple (true): Selecci√≥n de m√∫ltiples personas
     *   - Usado para: Seleccionar participantes de evento
     *   - UI: Ctrl+Click para selecci√≥n m√∫ltiple
     *   - Resultado: Lista de personas en getSeleccionadas()
     * 
     * Adaptaciones de UI:
     * Modo Simple:
     *   - Subt√≠tulo: "Buscar por DNI, nombre o apellido"
     *   - Bot√≥n: "‚úÖ Seleccionar Persona"
     *   - Comportamiento: Un solo click selecciona
     * 
     * Modo M√∫ltiple:
     *   - Subt√≠tulo: "Seleccionar m√∫ltiples personas (Ctrl+Click...)"
     *   - Bot√≥n: "‚úÖ Seleccionar Personas"
     *   - Comportamiento: Ctrl+Click para m√∫ltiples
     * 
     * @param multiple true para selecci√≥n m√∫ltiple, false para selecci√≥n simple
     * 
     * @implNote Este m√©todo debe llamarse ANTES de mostrar el modal para
     *           asegurar que la UI refleje correctamente el modo seleccionado
     */
    public void setMultiple(boolean multiple) {
        this.multiple = multiple;
        listResultados.getSelectionModel().setSelectionMode(
                multiple ? SelectionMode.MULTIPLE : SelectionMode.SINGLE
        );
        
        // Actualizar textos seg√∫n el modo
        if (multiple) {
            lblSubtitulo.setText("Seleccionar m√∫ltiples personas (Ctrl+Click para selecci√≥n m√∫ltiple)");
            btnSeleccionar.setText("‚úÖ Seleccionar Personas");
        } else {
            lblSubtitulo.setText("Buscar por DNI, nombre o apellido");
            btnSeleccionar.setText("‚úÖ Seleccionar Persona");
        }
    }

    /**
     * Procesa la selecci√≥n de personas y cierra el modal con los resultados.
     * 
     * Este m√©todo implementa la l√≥gica diferenciada para manejar tanto
     * selecci√≥n simple como m√∫ltiple, validando que se haya realizado
     * una selecci√≥n v√°lida antes de confirmar la operaci√≥n.
     * 
     * Flujo de Selecci√≥n:
     * Si modo m√∫ltiple:
     *   1. Obtener selecci√≥n m√∫ltiple del ListView
     *   2. Validar que hay al menos una persona seleccionada
     *   3. Copiar selecci√≥n a la lista de resultados
     *   4. Cerrar modal
     * 
     * Si modo simple:
     *   1. Obtener persona seleccionada del ListView
     *   2. Validar que hay una persona seleccionada
     *   3. Asignar a variable de resultado
     *   4. Cerrar modal
     * 
     * Validaciones Implementadas:
     * - Selecci√≥n Vac√≠a: Muestra alerta si no hay selecci√≥n
     * - Protecci√≥n de Estado: Diferentes validaciones por modo
     * - Feedback de Error: Mensajes espec√≠ficos por situaci√≥n
     * 
     * Gesti√≥n de Resultados:
     * Los resultados quedan disponibles mediante los m√©todos getter despu√©s
     * del cierre del modal, permitiendo al c√≥digo invocador recuperar la selecci√≥n.
     * 
     * @implNote Utiliza new ArrayList<>(seleccion) para crear una copia defensiva
     *           y evitar problemas de referencia compartida
     */
    private void seleccionar() {
        if (multiple) {
            List<Persona> seleccion = listResultados.getSelectionModel().getSelectedItems();
            if (seleccion.isEmpty()) {
                mostrarAlerta("Debe seleccionar al menos una persona.");
                return;
            }
            seleccionadas = new ArrayList<>(seleccion);
        } else {
            Persona p = listResultados.getSelectionModel().getSelectedItem();
            if (p == null) {
                mostrarAlerta("Debe seleccionar una persona.");
                return;
            }
            seleccionada = p;
        }
        cerrar();
    }

    /**
     * Cierra el modal de b√∫squeda liberando los recursos de la ventana.
     * 
     * Este m√©todo implementa el patr√≥n de cierre est√°ndar para modales JavaFX,
     * obteniendo la referencia al Stage desde el scene graph y cerr√°ndolo
     * apropiadamente para liberar recursos y notificar al c√≥digo invocador.
     * 
     * Proceso de Cierre:
     * - Obtener Stage: Navegaci√≥n por scene graph hasta la ventana
     * - Cerrar Ventana: stage.close() para cierre limpio
     * - Liberar Recursos: Permitir garbage collection
     * 
     * Integraci√≥n con Modal Pattern:
     * Despu√©s del cierre, el control regresa al c√≥digo que invoc√≥
     * showAndWait(), permitiendo procesar los resultados de la selecci√≥n.
     * 
     * @implNote Utiliza el bot√≥n cancelar como punto de referencia para
     *           obtener el Stage, t√©cnica est√°ndar en JavaFX
     */
    private void cerrar() {
        Stage stage = (Stage) btnCancelar.getScene().getWindow();
        stage.close();
    }

    /**
     * Obtiene la persona seleccionada en modo de selecci√≥n simple.
     * 
     * Este m√©todo debe usarse √∫nicamente cuando el modal fue configurado
     * en modo simple (setMultiple(false)). Proporciona acceso al resultado
     * de la selecci√≥n despu√©s de que el modal ha sido cerrado.
     * 
     * Contrato de Uso:
     * // Configurar y mostrar modal
     * controller.setMultiple(false);
     * stage.showAndWait();
     * 
     * // Obtener resultado
     * Persona seleccionada = controller.getSeleccionada();
     * if (seleccionada != null) {
     *     // Procesar persona seleccionada
     * }
     * 
     * @return La persona seleccionada, o null si se cancel√≥ o no se seleccion√≥ nada
     * 
     * @implNote Solo v√°lido despu√©s de cerrar el modal en modo simple
     */
    public Persona getSeleccionada() {
        return seleccionada;
    }

    /**
     * Obtiene la lista de personas seleccionadas en modo de selecci√≥n m√∫ltiple.
     * 
     * Este m√©todo debe usarse √∫nicamente cuando el modal fue configurado
     * en modo m√∫ltiple (setMultiple(true)). Devuelve una lista con todas
     * las personas que fueron seleccionadas con Ctrl+Click.
     * 
     * Contrato de Uso:
     * // Configurar y mostrar modal
     * controller.setMultiple(true);
     * stage.showAndWait();
     * 
     * // Obtener resultados
     * List<Persona> seleccionadas = controller.getSeleccionadas();
     * if (!seleccionadas.isEmpty()) {
     *     // Procesar personas seleccionadas
     * }
     * 
     * @return Lista de personas seleccionadas, vac√≠a si se cancel√≥ o no se seleccion√≥ nada
     * 
     * @implNote Solo v√°lido despu√©s de cerrar el modal en modo m√∫ltiple
     */
    public List<Persona> getSeleccionadas() {
        return seleccionadas;
    }

    /**
     * Muestra un di√°logo de alerta informativa al usuario.
     * 
     * M√©todo utilitario para mostrar mensajes de error o informaci√≥n
     * de manera consistente a trav√©s de toda la interfaz del modal.
     * Utiliza el estilo visual est√°ndar de JavaFX para alertas.
     * 
     * Caracter√≠sticas del Di√°logo:
     * - Tipo: INFORMATION (icono i azul)
     * - Header: null (sin texto de encabezado)
     * - Modalidad: Bloquea interacci√≥n hasta cerrar
     * - Comportamiento: showAndWait() espera respuesta del usuario
     * 
     * @param mensaje Texto a mostrar en el cuerpo del di√°logo de alerta
     * 
     * @implNote Utilizado principalmente para validaciones de selecci√≥n
     */
    private void mostrarAlerta(String mensaje) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setHeaderText(null);
        alert.setContentText(mensaje);
        alert.showAndWait();
    }

    /**
     * Abre el modal de registro para crear una nueva persona sin salir del flujo de b√∫squeda.
     * 
     * Este m√©todo implementa un "escape hatch" que permite a los usuarios
     * crear nuevas personas cuando no encuentran a quien buscan, manteniendo
     * la continuidad del flujo de trabajo sin obligar a salir y reiniciar
     * el proceso de selecci√≥n.
     * 
     * Flujo de Registro Integrado:
     * 1. Cargar FXML del formulario de registro existente
     * 2. Configurar RegistroController en modo modal (sin usuario/contrase√±a)
     * 3. Mostrar modal de registro con showAndWait()
     * 4. Si se registr√≥ exitosamente:
     *    a. Obtener la persona reci√©n creada
     *    b. Seleccionarla autom√°ticamente seg√∫n el modo actual
     *    c. Cerrar el modal de b√∫squeda con la selecci√≥n
     * 5. Si se cancel√≥: Continuar en el modal de b√∫squeda
     * 
     * Ventajas de la Integraci√≥n:
     * - Flujo Continuo: Sin interrupciones en la experiencia del usuario
     * - Selecci√≥n Autom√°tica: La persona creada queda preseleccionada
     * - Modo Adaptativo: Respeta el modo simple/m√∫ltiple del contexto
     * - Reutilizaci√≥n: Aprovecha el formulario de registro existente
     * 
     * Configuraci√≥n Modal:
     * Utiliza setModoModal(true) para omitir campos de usuario/contrase√±a
     * que no son relevantes en el contexto de registro r√°pido de participantes.
     * 
     * Manejo de Errores:
     * Captura y maneja errores de carga del FXML, mostrando mensajes
     * informativos sin crashes que degraden la experiencia del usuario.
     * 
     * @implNote Utiliza APPLICATION_MODAL para bloquear interacci√≥n con el
     *           modal de b√∫squeda mientras se registra la nueva persona
     */
    private void registrarNuevaPersona() {
        try {
            // Cargar el formulario de registro existente
            javafx.fxml.FXMLLoader loader = new javafx.fxml.FXMLLoader(
                getClass().getResource("/com/example/registro.fxml")
            );
            javafx.scene.Parent root = loader.load();

            RegistroController registroController = loader.getController();
            
            // Configurar el controller en modo modal (sin usuario/contrase√±a)
            registroController.setModoModal(true);

            // Crear y mostrar el modal
            javafx.stage.Stage stage = new javafx.stage.Stage();
            stage.setTitle("Registrar Nueva Persona");
            stage.initModality(javafx.stage.Modality.APPLICATION_MODAL);
            stage.setScene(new javafx.scene.Scene(root));
            stage.showAndWait();

            // Obtener la persona registrada
            Persona nuevaPersona = registroController.getPersonaRegistrada();
            if (nuevaPersona != null) {
                // Seleccionar autom√°ticamente la persona reci√©n creada
                if (multiple) {
                    seleccionadas.clear();
                    seleccionadas.add(nuevaPersona);
                } else {
                    seleccionada = nuevaPersona;
                }
                // Cerrar el modal principal
                cerrar();
            }

        } catch (Exception e) {
            e.printStackTrace();
            mostrarAlerta("Error al abrir el formulario de registro: " + e.getMessage());
        }
    }
}
